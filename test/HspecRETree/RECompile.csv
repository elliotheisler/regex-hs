# Epsilon (empty regex, matches everything)
empty regex evaluates to Epsilon /  / Epsilon
repetition zero times evaluates to Epsilon / a{0,0} / Epsilon
union of nothing evaluates to Epsilon / | / Epsilon
union of repetitions of nothing evals to Epsilon / a{0,0}|b{0,0} / Epsilon
union of many things that eval to Epsilon, evaluates to Epsilon / a{0,0}|b{0,0}| {0,0}|| / Epsilon

# trimFat test cases
union of one thing evaluates to that thing / a| / Symbol 'a'
concat of one thing evaluates to that thing / a / Symbol 'a'
repetition one time evaluates to that thing / a{1,1} / Symbol 'a'
union of repetitions of nothing evals to Epsilon / a{0,0}b{0,0}|W{1,1}|n{0,0} / Symbol 'W'

# quantifiers
'*' quantifier greedy / a* / Q (Quantifier (Symbol 'a') 0 Unlimited Greedy)
'+' quantifier greedy / a+ / Q (Quantifier (Symbol 'a') 1 Unlimited Greedy)
'?' quantifier greedy / a? / Q (Quantifier (Symbol 'a') 0 (Upper 1) Greedy)
'{}' range quantifier greedy / a{2,3} / Q (Quantifier (Symbol 'a') 2 (Upper 3) Greedy)
'{}' range quantifier Unlimited greedy / a{2,} / Q (Quantifier (Symbol 'a') 2 Unlimited Greedy)
'*' quantifier lazy / a*? / Q (Quantifier (Symbol 'a') 0 Unlimited Lazy)
'+' quantifier lazy / a+? / Q (Quantifier (Symbol 'a') 1 Unlimited Lazy)
'?' quantifier lazy / a?? / Q (Quantifier (Symbol 'a') 0 (Upper 1) Lazy)
'{}' range quantifier lazy / a{2,3}? / Q (Quantifier (Symbol 'a') 2 (Upper 3) Lazy)
'{}' range quantifier Unlimited lazy / a{2,}? / Q (Quantifier (Symbol 'a') 2 Unlimited Lazy)

# capture groups
empty capture group evaluates to group of Epsilon / () / CaptureGroup Epsilon
capture group of thing evaluates to group of that thing / (a) / CaptureGroup (Symbol 'a')
capture group preserved in zero quantifier / (p){0,0} / Q (Quantifier (CaptureGroup (Symbol 'p')) 0 (Upper 0) Greedy)
empty capture group preserved in union / ()|a{0,0}|() / Union [(CaptureGroup Epsilon), (CaptureGroup Epsilon)]
empty capture group preserved in concat / ()a() / Concat [(CaptureGroup Epsilon), (Symbol 'a'), (CaptureGroup Epsilon)]
empty capture groups preserved in zero quantifier or in union / (ab){0,0}|a{0,0}|() / Union [(Q (Quantifier (CaptureGroup (Concat [(Symbol 'a'), (Symbol 'b')])) 0 (Upper 0) Greedy)), (CaptureGroup Epsilon)]

# non-ranges
'{' does not denote start of a range for $THIS / a{ / Concat [Symbol 'a', Symbol '{']
'{' does not denote start of a range for $THIS / a{h / Concat [Symbol 'a', Symbol '{', Symbol 'h']
'{' does not denote start of a range for $THIS / a{h} / Concat [Symbol 'a', Symbol '{', Symbol 'h', Symbol '}']
'{' does not denote start of a range for $THIS / a{1,2b} / Concat [Symbol 'a', Symbol '{', Symbol '1', Symbol ',', Symbol '2', Symbol 'b', Symbol '}']

# failures
unescaped backslash fails to parse / \ / $FAIL
lone quantifier ? fails to parse / ? / $FAIL
lone quantifier + fails to parse / + / $FAIL
lone quantifier * fails to parse / * / $FAIL
lone opening parenthesis fails to parse / ( / $FAIL
lone closing parenthesis fails to parse / ) / $FAIL
lone square opening bracket fails to parse / [ / $FAIL
nonsensical range fails to parse / a{3,2}b / $FAIL
empty char class fails to parse / [] / $FAIL
char class with improper lower bound fails / [\w-z] / $FAIL
char class with improper upper bound fails / [a-\w] / $FAIL
char class with both improper bounds fails / [\w-\w] / $FAIL

# character classes
char-class containing one char should be a range / [\a] / CharClass (RangeChC '\a' '\a')
range of same character should also be a range / [\a-\a] / CharClass (RangeChC '\a' '\a')
shorthand esc sequence / \w / CharClass (UnionChC [ (RangeChC 'a' 'z'), (RangeChC 'A' 'Z'), (RangeChC '0' '9'), (RangeChC "_" "_") ])
[\w] and \w should be the same / [\w] / CharClass (UnionChC [ (RangeChC 'a' 'z'), (RangeChC 'A' 'Z'), (RangeChC '0' '9'), (RangeChC "_" "_") ])
inverted shorthand esc sequence / \W / CharClass (NotChC (UnionChC [ (RangeChC 'a' 'z'), (RangeChC 'A' 'Z'), (RangeChC '0' '9'), (RangeChC "_" "_") ]))
basic range / [a-z] / CharClass (RangeChC 'a' 'z')
inverted basic range / [^a-b] / (NotChC (RangeChC 'a' 'b'))
complex range / [a-z\a0-Z] / CharClass (UnionChC [(RangeChC 'a' 'z'), (RangeChC '\a' '\a'), (RangeChC '0' 'Z')])

