{-# LANGUAGE OverloadedStrings #-}

module _ -- TODO
    ( doSpec
    ) where

import Test.Hspec

import TestUtil

type Description = String
type Input = -- TODO
type Result = -- TODO
csvFile :: FilePath = -- TODO
unitUnderTest :: Input -> Result = -- TODO
parseExpected :: Text -> Result -- TODO: usually just 'read . Text.unpack $ expected :: Result'
parseExpected = read
parseInput :: Text -> Input -- TODO: probably just 'read . Text.unpack $ input :: Input'
parseInput = read



{-=-=-=-=-=-=-=-= dont change this stuff below =-=-=-=-=-=-=-=-}

doSpec :: Spec
doSpec = runMyTests unitUnderTest csvFile

runMyTests :: (Input -> Result) -> FilePath -> Spec
runMyTests fn csvFile = do
    tests <- map parseTestCase <$> runIO (readCommentedCSV csvDelim csvFile)
    forM_ tests $ \(description, input, expected) ->
      it description $
        fn input `shouldBe` expected

parseTestCase :: [Text] -> (Description, Input, Result)
parseTestCase [desc, input, expected] =
    ( Text.unpack $ substituteVars desc input expected
    , parseInput input
    , parseExpected expected
    )

parseTestCase _ = 
  error "MALFORMED TEST CASE: Tried to parseTriple on list not of length=3"
